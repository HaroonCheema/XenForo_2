{"version":3,"sources":["../src/field-counter.js"],"names":["AL","window","XF","$","FieldCounter","Element","newHandler","maxLength","length","options","maxLengthMessage","init","maxlength","$target","attr","parseInt","createCounter","updateLength","on","proxy","explain","closest","find","append","Math","max","val","text","replace","updateCounter","evt","preventDefault","register","jQuery","document"],"mappings":"aAAA;AACA,GAAIA,CAAAA,EAAE,CAAGC,MAAM,CAACD,EAAP,EAAa,EAAtB,CAEA,CAAC,SAAUE,CAAV,CAAcC,CAAd,CAA+C,CA6C5C,MA5CAH,CAAAA,EAAE,CAACI,YAAH,CAAkBF,CAAE,CAACG,OAAH,CAAWC,UAAX,CAAsB,CACpCC,SAAS,CAAE,CADyB,CAEpCC,MAAM,CAAE,CAF4B,CAGpCC,OAAO,CAAE,CACLC,gBAAgB,CAAE,oCADb,CAH2B,CAMpCC,IAAI,CAAE,eAAY,CACd,GAAMC,CAAAA,CAAS,CAAG,KAAKC,OAAL,CAAaC,IAAb,CAAkB,WAAlB,CAAlB,CACKF,CAAD,EAA0C,CAA5B,GAAAG,QAAQ,CAACH,CAAD,CAAY,EAAZ,CAFZ,GAMd,KAAKA,SAAL,CAAiBG,QAAQ,CAACH,CAAD,CAAY,EAAZ,CANX,CAQd,KAAKI,aAAL,EARc,CASd,KAAKC,YAAL,EATc,CAWd,KAAKJ,OAAL,CAAaK,EAAb,CAAgB,OAAhB,CAAyBhB,CAAE,CAACiB,KAAH,CAAS,IAAT,CAAe,eAAf,CAAzB,CAXc,CAYjB,CAlBmC,CAmBpCH,aAAa,CAAE,wBAAY,CACvB,GAAII,CAAAA,CAAO,CAAG,KAAKP,OAAL,CAAaQ,OAAb,CAAqB,IAArB,EAA2BC,IAA3B,CAAgC,kBAAhC,CAAd,CACKF,CAAO,CAACZ,MAFU,GAGnBY,CAAO,CAAGjB,CAAC,CAAC,uCAAD,CAHQ,CAInB,KAAKU,OAAL,CAAaQ,OAAb,CAAqB,IAArB,EAA2BE,MAA3B,CAAkCH,CAAlC,CAJmB,EAMvBA,CAAO,CAACG,MAAR,CAAepB,CAAC,CAAC,uCAAD,CAAhB,CACH,CA1BmC,CA2BpCc,YAAY,CAAE,uBAAY,OAEPO,IAAI,CAACC,GAFE,CACtB,KAAKjB,MAAL,CAAc,KAAKK,OAAL,CAAaa,GAAb,GAAmBlB,MADX,CAEtB,GAAMA,CAAAA,CAAM,CAAG,EAAS,CAAT,CAAY,KAAKI,SAAL,CAAiB,KAAKJ,MAAlC,CAAf,CACA,KAAKK,OAAL,CAAaQ,OAAb,CAAqB,IAArB,EAA2BC,IAA3B,CAAgC,kBAAhC,EAAoDK,IAApD,CAAyD,KAAKlB,OAAL,CAAaC,gBAAb,CAA8BkB,OAA9B,CAAsC,SAAtC,CAAiDpB,CAAjD,CAAzD,CACH,CA/BmC,CAgCpCqB,aAAa,CAAE,uBAAUC,CAAV,CAAe,OAC1B,MAAKb,YAAL,EAD0B,GAEtB,KAAKT,MAAL,EAAe,KAAKI,SAFE,IAGtBkB,CAAG,CAACC,cAAJ,EAHsB,IAO7B,CAvCmC,CAAtB,CA4ClB,CAFA7B,CAAE,CAACG,OAAH,CAAW2B,QAAX,CAAoB,kBAApB,CAAwC,iBAAxC,CAEA,IACJ;AACC,CA/CA,CA+CC/B,MAAM,CAACC,EA/CR,CA+CYD,MAAM,CAACgC,MA/CnB,CA+C2BhC,MA/C3B,CA+CmCiC,QA/CnC,C","sourcesContent":["// @ts-check\nvar AL = window.AL || {};\n\n!function (XF, $, window, document, _undefined) {\n    AL.FieldCounter = XF.Element.newHandler({\n        maxLength: 0,\n        length: 0,\n        options: {\n            maxLengthMessage: 'Number of characters left: {count}',\n        },\n        init: function () {\n            const maxlength = this.$target.attr('maxlength');\n            if (!maxlength || parseInt(maxlength, 10) === 0) {\n                return;\n            }\n\n            this.maxlength = parseInt(maxlength, 10);\n\n            this.createCounter();\n            this.updateLength();\n\n            this.$target.on('input', XF.proxy(this, 'updateCounter'));\n        },\n        createCounter: function () {\n            let explain = this.$target.closest('dd').find('.formRow-explain');\n            if (!explain.length) {\n                explain = $('<div class=\"formRow-explain\"></div>');\n                this.$target.closest('dd').append(explain);\n            }\n            explain.append($('<div class=\"formRow-counter\"></div>'));\n        },\n        updateLength: function () {\n            this.length = this.$target.val().length;\n            const length = Math.max(0, this.maxlength - this.length);\n            this.$target.closest('dd').find('.formRow-counter').text(this.options.maxLengthMessage.replace('{count}', length));\n        },\n        updateCounter: function (evt) {\n            this.updateLength();\n            if (this.length >= this.maxlength) {\n                evt.preventDefault();\n                return false;\n            }\n            return true;\n        }\n    });\n\n    XF.Element.register('al-field-counter', 'AL.FieldCounter');\n\n    return true;\n// @ts-ignore\n}(window.XF, window.jQuery, window, document);"],"file":"field-counter.min.js"}