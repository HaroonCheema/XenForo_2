<?xml version="1.0" encoding="utf-8"?>
<templates>
  <template type="public" title="forum_filters_latest" version_id="1000600" version_string="1.0.6 Alpha"><![CDATA[<xf:js src="vendor/select2/select2.full.min.js" />
<xf:js>
	$(document).ready(function() {
	$('.js-example-basic-single').select2({
	containerCssClass: "input" 
	});
	});
</xf:js>

<xf:css src="select2.less"/>
<xf:css src="altf_select2.less"/>
<xf:js prod="xf/token_input-compiled.js" dev="vendor/select2/select2.full.min.js, xf/token_input.js"/>

<xf:js>
	jQuery.extend(XF.phrases, {
	s2_error_loading: "{{ phrase('s2_error_loading')|escape('js') }}",
	s2_input_too_long: "{{ phrase('s2_input_too_long')|escape('js') }}",
	s2_input_too_short: "{{ phrase('s2_input_too_short')|escape('js') }}",
	s2_loading_more: "{{ phrase('s2_loading_more')|escape('js') }}",
	s2_maximum_selected: "{{ phrase('s2_maximum_selected')|escape('js') }}",
	s2_no_results: "{{ phrase('s2_no_results')|escape('js') }}",
	s2_searching: "{{ phrase('s2_searching')|escape('js') }}"
	});
</xf:js>

<style>

	.sticky-filter {
		position: -webkit-sticky;
		position: sticky;
		top: 70px; 
	}

</style>
<xf:form action="{{ link('latest-contents/filters', $forum) }}" >

	<xf:extension name="start"></xf:extension>

	<div class="menu-row menu-row--separated">
		{{ phrase('nodes:') }}
		<div class="u-inputSpacer">
			<xf:select name="thread_fields[node_ids]"  value="{{ $conditions.thread_fields.node_ids ?: [] }}" multiple="{{ true }}" class="input js-example-basic-single"

					   title="{{ phrase('nodes') }}">

				<xf:foreach loop="{$forums}" key="$nodeId" value="$node">
					<xf:option value="{$nodeId}"
							   label="{{ $node.title }}" />
				</xf:foreach>

			</xf:select>
		</div>
	</div>

	<!--[XF:above_prefixes]-->

	<xf:extension name="before_started_by"></xf:extension>

	<!--[XF:above_started_by]-->

	<xf:extension name="before_date_limit"></xf:extension>

	<!--[XF:above_last_updated]-->
	<div class="menu-row menu-row--separated">
		<label for="ctrl_last_updated">{{ phrase('last_updated:') }}</label>
		<div class="u-inputSpacer">
			<xf:if is="$filters.no_date_limit">
				<xf:set var="$lastDays" value="" />
				<xf:else />
				<xf:set var="$lastDays" value="{{ $filters.last_days ?: $forum.list_date_limit_days }}" />
			</xf:if>
			<xf:select name="last_days" value="{$conditions.last_days}" id="ctrl_last_updated">
				<xf:option value="-1">{{ phrase('any_time') }}</xf:option>
				<xf:option value="7">{{ phrase('x_days', {'days': '7'}) }}</xf:option>
				<xf:option value="14">{{ phrase('x_days', {'days': '14'}) }}</xf:option>
				<xf:option value="30">{{ phrase('x_days', {'days': '30'}) }}</xf:option>
				<xf:option value="60">{{ phrase('x_months', {'months': '2'}) }}</xf:option>
				<xf:option value="90">{{ phrase('x_months', {'months': '3'}) }}</xf:option>
				<xf:option value="182">{{ phrase('x_months', {'months': '6'}) }}</xf:option>
				<xf:option value="365">{{ phrase('1_year') }}</xf:option>
			</xf:select>
		</div>
	</div>

	<!--[XF:above_sort_by]-->
	<div class="menu-row menu-row--separated">
		{{ phrase('sort_by:') }}
		<div class="inputGroup u-inputSpacer">
			<span class="u-srOnly" id="ctrl_sort_by">{{ phrase('sort_order') }}</span>
			<xf:select name="order" value="{{ $conditions.order ?: $forum.default_sort_order }}" aria-labelledby="ctrl_sort_by">
				<xf:foreach loop="$sortOptions" key="$sortKey" value="$null">
					<xf:option value="{$sortKey}">{{ phrase_dynamic('forum_sort.' . $sortKey) }}</xf:option>
				</xf:foreach>
				<xf:option value="brivium_rating_count">{{ phrase('fs_latest_update_rating_sort') }}</xf:option>
			</xf:select>
			<span class="inputGroup-splitter"></span>
			<span class="u-srOnly" id="ctrl_sort_direction">{{ phrase('sort_direction') }}</span>
			<xf:select name="direction" value="{{ $conditions.direction ?: $forum.default_sort_direction }}" aria-labelledby="ctrl_sort_direction">
				<xf:option value="desc">{{ phrase('descending') }}</xf:option>
				<xf:option value="asc">{{ phrase('ascending') }}</xf:option>
			</xf:select>
		</div>

	</div>

	<div class="menu-row menu-row--separated">
		<label for="ctrl_started_by">{{ phrase('keywords:') }}</label>
		<div class="u-inputSpacer">
			<xf:textbox name="keywords" value="{{ $conditions.keywords }}"/>
		</div>
	</div>

	<div class="menu-row menu-row--separated">
		<label for="ctrl_started_by">{{ phrase('tags:') }}</label>
		<div class="u-inputSpacer">
			<xf:tokeninput name="tags" value="{{ $conditions.tags}}"
						   href="{{ link('misc/tag-auto-complete') }}"
						   min-length="{$xf.options.tagLength.min}"
						   max-length="{$xf.options.tagLength.max}"
						   max-tokens="{$xf.options.maxContentTags}"
						   >
			</xf:tokeninput>
		</div>
	</div>

	<div class="menu-row menu-row--separated">
		<label for="ctrl_started_by">{{ phrase('exclude_tags:') }}</label>
		<div class="u-inputSpacer">
			<xf:tokeninput name="extags" value="{{ $conditions.extags}}"
						   href="{{ link('misc/tag-auto-complete') }}"
						   min-length="{$xf.options.tagLength.min}"
						   max-length="{$xf.options.tagLength.max}"
						   max-tokens="{$xf.options.maxContentTags}"
						   >
			</xf:tokeninput>

			<xf:comment>max-tokens="{$xf.options.maxContentTags}"</xf:comment>
		</div>
	</div>

	<xf:comment>

		<div class="menu-row menu-row--separated">
			{{ phrase('prefix:') }}
			<div class="u-inputSpacer">
				<xf:select name="prefix_ids1"  value="{{ $conditions.prefix_ids1 ?: [] }}" multiple="{{ true }}" class="input js-example-basic-single"

						   title="{{ phrase('prefix') }}">

					<xf:foreach loop="{{$prefixGroup1}}" key="$prefixId" value="$prefix">
						<xf:option value="{$prefixId}"
								   label="{{ prefix_title('thread', $prefixId) }}"
								   data-prefix-class="{$prefix.css_class}"
								   data-has-help="{$prefix.has_usage_help}" />
					</xf:foreach>

				</xf:select>
			</div>
		</div>

	</xf:comment>

	<div class="menu-row menu-row--separated">
		{{ phrase('fs_status_engine:') }}
		<div class="u-inputSpacer">
			<xf:select name="prefix_ids2"  value="{{ $conditions.prefix_ids2 ?: [] }}" multiple="{{ true }}" class="input js-example-basic-single"

					   title="{{ phrase('prefix') }}">

				<xf:foreach loop="{{$prefixGroup2}}" key="$prefixId" value="$prefix">
					<xf:option value="{$prefixId}"
							   label="{{ prefix_title('thread', $prefixId) }}"
							   data-prefix-class="{$prefix.css_class}"
							   data-has-help="{$prefix.has_usage_help}" />
				</xf:foreach>

			</xf:select>
		</div>
	</div>

	<div class="menu-row menu-row--separated">
		{{ phrase('fs_status_prefix:') }}
		<div class="u-inputSpacer">
			<xf:select name="prefix_ids3"  value="{{ $conditions.prefix_ids3 ?: [] }}" multiple="{{ true }}" class="input js-example-basic-single"

					   title="{{ phrase('prefix') }}">

				<xf:foreach loop="{{$prefixGroup3}}" key="$prefixId" value="$prefix">
					<xf:option value="{$prefixId}"
							   label="{{ prefix_title('thread', $prefixId) }}"
							   data-prefix-class="{$prefix.css_class}"
							   data-has-help="{$prefix.has_usage_help}" />
				</xf:foreach>

			</xf:select>
		</div>
	</div>

	<div class="menu-row menu-row--separated">
		{{ phrase('rating:') }}
		<div class="u-inputSpacer">

			<xf:macro name="rating" arg-currentRating="{{ $conditions.rating ?: 0 }}"/>

		</div>
	</div>

	<xf:extension name="end"></xf:extension>

	<div class="menu-footer">
		<span class="menu-footer-controls">
			<xf:button type="submit" class="button--primary">{{ phrase('filter') }}</xf:button>
		</span>
	</div>
	<xf:hiddenval name="apply">1</xf:hiddenval>

</xf:form>

<xf:macro name="rating"
		  arg-row="{{ true }}"
		  arg-rowType="{$rowType}"
		  arg-rowLabel="{{ phrase('rating') }}"
		  arg-rowHint=""
		  arg-rowExplain=""
		  arg-name="rating"
		  arg-currentRating="0"
		  arg-ratingHref=""
		  arg-readOnly="false"
		  arg-deselectable="false"
		  arg-showSelected="true"
		  arg-range="{{ {
					 1: phrase('terrible'),
					 2: phrase('poor'),
					 3: phrase('average'),
					 4: phrase('good'),
					 5: phrase('excellent')
					 } }}">

	<xf:macro template="rating_macros" name="setup" />

	<xf:set var="$inner">
		<xf:select name="{$name}"
				   class="br-select"
				   data-xf-init="rating"
				   data-initial-rating="{$currentRating}"
				   data-rating-href="{$ratingHref}"
				   data-readonly="{$readOnly}"
				   data-deselectable="{$deselectable}"
				   data-show-selected="{$showSelected}">

			<xf:if is="$deselectable">
				<xf:option value="" />
			</xf:if>
			<xf:foreach loop="$range" key="$value" value="$label">
				<xf:option value="{$value}">{$label}</xf:option>
			</xf:foreach>
		</xf:select>
	</xf:set>

	<xf:if is="$row">
		{$inner|raw}
		<xf:else />
		{$inner|raw}
	</xf:if>
</xf:macro>]]></template>
  <template type="public" title="forum_view_latest_content" version_id="1000500" version_string="1.0.5 Alpha"><![CDATA[<xf:title page="{$page}">{{phrase('latest_content')}}</xf:title>

<xf:css src="structured_list.less" />

<xf:css src="fs_latest_update_list.less" />
<xf:css src="fs_latest_update_list_slider.less" />

<xf:js src="vendor/lightslider/lightslider.js" min="1" />
<xf:js src="FS/LatestUpdateSlider/slider.js" min="1" />

<xf:css src="forum_view_latest_content.less" />

<style>
	.gridLarg{
		grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)) !important;
	}
</style>

<xf:if is="count($featuredThreads)">
	<div class="block">

		<div class="block-container">

			<div class="block-body block-row">
				<div class="itemList itemList--slider"
					 data-xf-init="item-slider"
					 data-xf-item-slider='{"item":{$xf.options.fs_latest_update_on_slider},"itemWide":3,"itemMedium":2,"itemNarrow":1,"auto":false,"loop":true}'>

					<xf:foreach loop="$featuredThreads" value="$thread">
						<div class="itemList-item itemList-item--slider" style="overflow: unset !important;">
							<xf:macro name="fs_latest_thread_slider_macros::slider"
									  arg-thread="{$thread}"

									  args="{$templateOverrides.thread_list_macro_args}"  />
						</div>
					</xf:foreach>

				</div>
			</div>

		</div>
	</div>
</xf:if>

<div class="block " data-xf-init="{{ $canInlineMod ? 'inline-mod' : '' }}" data-type="thread" data-href="{{ link('inline-mod') }}">

	<div class="block-outer"><xf:trim>
		<xf:pagenav
					page="{$page}" perpage="{$perPage}" total="{$total}"
					link="latest-contents" data="{$forum}" params="{$conditions}"
					wrapperclass="block-outer-main" />
		<xf:if contentcheck="true">
			<div class="block-outer-opposite">
				<div class="buttonGroup">
					<xf:contentcheck>
						<xf:if is="$xf.visitor.user_id">
							<xf:button href="{{ link('latest-contents/options') }}"
									   class="button--link" overlay="true">
								<xf:fa icon="fas fa-cog" />
							</xf:button>
						</xf:if>
					</xf:contentcheck>
				</div>
			</div>
		</xf:if>
		</xf:trim></div>


	<div class="block-container">

		<div class="block-body">
			<xf:extension name="thread_list">
				<div class="structItemContainer">

					<xf:if is="$threads is not empty AND ($xf.visitor.tile_layout == 'grid' OR $xf.visitor.tile_layout == 'girdLg')">

						<div class="structItemContainer-group js-threadList {{$xf.visitor.tile_layout == 'girdLg' ? 'gridLarg' : ' '}}" >
							<xf:if is="$threads is not empty">
								<xf:foreach loop="$threads" value="$thread">
									<xf:macro name="fs_latest_thread_list_macros::item"
											  arg-thread="{$thread}"

											  args="{$templateOverrides.thread_list_macro_args}"  />
								</xf:foreach>
								<xf:if is="$showDateLimitDisabler">
									<xf:macro name="date_limit_disabler" arg-forum="{$forum}" arg-page="{$page}" arg-filters="{$filters}" />
								</xf:if>
							</xf:if>
						</div>
						<xf:elseif is="$threads is not empty AND ($xf.visitor.tile_layout == 'list')" />
						<xf:foreach loop="$threads" value="$thread">
							<xf:macro name="fs_latest_thread_list_macros::list"
									  arg-thread="{$thread}"
									  args="{$templateOverrides.thread_list_macro_args}"  />
						</xf:foreach>
						<xf:else />
						<div class="block-body block-row">{{ phrase('no_results_found') }}</div>
					</xf:if>
				</div>
			</xf:extension>
		</div>
	</div>

	<div class="block-outer block-outer--after">
		<xf:pagenav
					page="{$page}" perpage="{$perPage}" total="{$total}"
					link="latest-contents" data="{$forum}" params="{$conditions}"
					wrapperclass="block-outer-main" />

	</div>
</div>
<xf:sidebar key="conversationInfo">
	<div class="block {{$xf.visitor.filter_sidebar == 'sticky' ? 'sticky-filter' : ' '}}">
		<div class="block-container">
			<xf:include template="forum_filters_latest" />
		</div>
	</div>
</xf:sidebar>

<xf:widgetpos id="forum_view_sidebar" context-forum="{$forum}" position="sidebar" />]]></template>
  <template type="public" title="forum_view_latest_content.less" version_id="1000100" version_string="1.0.1 Alpha"><![CDATA[@resource-grid-gap: 10px;
@resource-grid-width: 250px;
@resource-grid-thumb: 108px;
@supports(display: grid) {
    body[data-template="forum_view_latest_content"] {
        .structItemContainer-group,
        .structItemContainer-group--sticky {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(@resource-grid-width, 1fr));
            grid-gap: @resource-grid-gap;
            padding: @resource-grid-gap;
            background-color: @xf-contentAltBg;
        }
        .structItem--thread {
            display: grid;
            grid-template-areas: 'icon icon' 'main main' 'meta latest' 'iconEnd iconEnd';
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.28);
            border-radius: 5px;
            position: relative;
			height: fit-content;
            .structItem-cell--icon {
                grid-area: icon;
                width: 100%;
                padding: 0px 0px 10px 0px;
                border-radius: 5px 5px 0px 0px;
            }
            .structItem-cell--main {
                grid-area: main;
                margin-top: 5px;
            }
            .structItem-cell--meta {
                grid-area: meta;
                width: 100%;
                position: absolute;
                width: 70px;
                font-size: 13px;
                color: #8c8c8c !important;
            }
            .structItem-cell--latest {
                grid-area: latest;
                width: 100%;
                font-size: 13px;
                white-space: nowrap;
            }
            .structItem-cell--iconEnd {
                padding: 0px 0px 0px 5px !important;
                height: 38px;
            }
        }
        .structItem-cell--meta .pairs--justified dd {
            float: left;
        }
        .structItem-iconContainer .structItem-secondaryIcon {
            position: absolute;
            width: 60px;
            height: 60px;
            font-size: 12px;
            bottom: -20px;
            border: 3px solid #fefefe;
            left: 50%;
            transform: translateX(-50%);
        }
        .structItem-cell--meta .pairs--justified:first-child dd:before {
            font-family: 'Font Awesome 5 Pro';
            content: "\f3e5\20";
            padding-right: 5px;
        }
        .structItem-cell--meta .pairs--justified:last-child dd:before {
            font-family: 'Font Awesome 5 Pro';
            content: "\f06e  :";
            padding-right: 5px;
        }
        .structItem-cell--meta .pairs--justified:last-child dt {
            font-size: 0px;
        }
        .structItem-cell--meta .pairs--justified:first-child dt {
            font-size: 0px;
        }
        @media (max-width: 650px) {
            .js-threadList {
                padding: 0px !important;
            }
            .structItem--thread .structItem-cell--main {
                   padding-left: 10px !important;
    				padding-right: 10px;
            }
            .structItem--thread {
                border-radius: 0px !important;
            }
            .structItem-cell.structItem-cell--latest:before {
                display: none;
            }
			.structItem-cell--meta{
				padding-left: 10px !important;
    			padding-right: 10px;
			}
			.structItem-cell--latest{
				 padding-right: 10px;
			}
			.structItem-cell.structItem-cell--iconEnd, .structItem-cell.structItem-cell--meta .structItem-minor, .structItem-cell.structItem-cell--latest .structItem-minor{
				display:block;
			}
			.structItem-cell.structItem-cell--latest{				
    		padding-bottom: 10px;
			}
        }
    }
}]]></template>
  <template type="public" title="fs_latest_thread_featured" version_id="1000100" version_string="1.0.1 Alpha"><![CDATA[<xf:if is="$isFeatured">
	<xf:title>{{ phrase('fs_unfeatured_thread') }}</xf:title>
	<xf:else />
	<xf:title>{{ phrase('fs_featured_thread') }}</xf:title>
</xf:if>

<xf:breadcrumb source="$thread.getBreadcrumbs()" />

<xf:form action="{{ link('threads/featured', $thread) }}" class="block" ajax="true">
	<div class="block-container">
		<div class="block-body">
			<xf:if is="$isFeatured">
				<xf:inforow rowtype="confirm">
					{{ phrase('you_sure_you_want_to_unfeatured_this_thread') }}
				</xf:inforow>

				<xf:hiddenval name="stop">1</xf:hiddenval>
				<xf:else />
				<xf:inforow rowtype="confirm">
					{{ phrase('you_sure_you_want_to_featured_this_thread') }}
				</xf:inforow>
			</xf:if>
		</div>
		<xf:if is="$isFeatured">
			<xf:submitrow submit="{{ phrase('fs_latest_unfeatured') }}" rowtype="simple" />
			<xf:else />
			<xf:submitrow submit="{{ phrase('fs_latest_featured') }}" />
		</xf:if>
	</div>
</xf:form>]]></template>
  <template type="public" title="fs_latest_thread_list_macros" version_id="1000600" version_string="1.0.6 Alpha"><![CDATA[<xf:macro name="item"
		  arg-thread="!"
		  arg-forum=""
		  arg-forceRead="{{ false }}"
		  arg-showWatched="{{ true }}"
		  arg-allowInlineMod="{{ true }}"
		  arg-chooseName=""
		  arg-extraInfo=""
		  arg-allowEdit="{{ true }}">

	<xf:css src="structured_list.less" />

	<style>
		.hiddenDiv {
			display: none;
			position: absolute; 
			left: 0;
			width: 100%;  
			background-color: #17202f;
			padding: 10px;
			z-index: 10; 
			border-radius: 5px;
		}

		.onHoverDisp:hover .hiddenDiv {
			display: block;
		}

		.onHoverDisp:hover .hideUpdateImg {
			display: none;
		}

		.dispUpdateSlider {
			display: none;
		}

		.onHoverDisp:hover .dispUpdateSlider {
			display: block;
		}

		.containers {
			position: relative;
			top: -14px;
			display: flex;
			justify-content: space-between;
			margin: 0px 7px;
		}

		.onHoverDisp {
			transition: transform 0.15s ease-in-out;
		}
		.onHoverDisp:hover {
			transform: scale(1.03);  
			z-index: 100;
		}	

		.slider-container {
			width: 100%;
			max-width: 600px;
			overflow: hidden; 
			position: relative; 
			margin: 5px auto; 
		}

		.slider {
			display: flex;
			transition: transform 0.5s ease-in-out; 
		}

		.slider img {
			width: 100%; 
			flex-shrink: 0; 
			height: 300px; 
			object-fit: cover; 
		}

		.slider img {
			display: none !important;
		}

		.slider img.active {
			display: block !important; 
		}

		.slide-number {
			position: absolute;
			top: 3px;
			left: 7px;
			background: rgba(0, 0, 0, 0.5); 
			color: white;
			padding: 3px 5px;
			border-radius: 3px;
			font-size: 10px;
			font-weight: bold;
		}

		.field_game_title {
			color: #9398a0;
			margin: 0 0 0 5px;
			white-space: nowrap;
		}
	</style>

	<div class="structItem structItem--thread{{ $thread.prefix_id ? ' is-prefix' . $thread.prefix_id : '' }}{{ $thread.isIgnored() ? ' is-ignored' : '' }}{{ ($thread.isUnread() AND !$forceRead) ? ' is-unread' : '' }}{{ $thread.discussion_state == 'moderated' ? ' is-moderated' : '' }}{{ $thread.discussion_state == 'deleted' ? ' is-deleted' : '' }} js-inlineModContainer js-threadListItem-{$thread.thread_id} onHoverDisp" style="position: unset;" data-author="{{ $thread.User.username ?: $thread.username }}">

		<xf:extension name="icon_cell">
			<xf:if is="in_array($thread.node_id, $xf.options.node_id_for_thumb)" >

				<div class="structItem-cell structItem-cell--icon" style="width: {{ $thread.Forum.Node.node_thread_thumbnail_width ? $thread.Forum.Node.node_thread_thumbnail_width : $xf.options.thumbnail_width }}; height: {{ $thread.Forum.Node.node_thread_thumbnail_height ? $thread.Forum.Node.node_thread_thumbnail_height : $xf.options.thumb_size_hemant }}; position: unset;">

					<div class="structItem-iconContainer" style="position: unset;">
						<a href="{{ link('threads', $thread) }}" target="{{$xf.visitor.new_tab == 'yes' ? '_blank' : '_self'}}"> 
							<img src="{$thread.getfirstPostImgUrl()}" class="{{count($thread.FirstPost.Attachments) > 1 ? 'hideUpdateImg' : ' '}}" style="width: {{ $thread.Forum.Node.node_thread_thumbnail_width ? $thread.Forum.Node.node_thread_thumbnail_width : $xf.options.thumbnail_width }} ; height: {{ $thread.Forum.Node.node_thread_thumbnail_height ? $thread.Forum.Node.node_thread_thumbnail_height : $xf.options.thumb_size_hemant }}; object-fit: cover; border-bottom: solid 2px #fa7d24">
						</a>
						<xf:if is="count($thread.FirstPost.Attachments) > 1">
							<a href="{{ link('threads', $thread) }}" target="{{$xf.visitor.new_tab == 'yes' ? '_blank' : '_self'}}"> 
								<div class="slider-container dispUpdateSlider" id="slider-container">
									<!-- Numbering Display -->
									<div class="slide-number" id="slide-number"></div>
									<div class="slider" id="slider">
										<xf:foreach loop="$thread.FirstPost.Attachments" value="$attachment" i="$i" if="$attachment.has_thumbnail">
											<img src="{$attachment.thumbnail_url}?{{($xf.time + $i)}}" class="{{$i == 1 ? 'active' : ' '}}" alt="{$attachment.filename}" style="width: {{ $thread.Forum.Node.node_thread_thumbnail_width ? $thread.Forum.Node.node_thread_thumbnail_width : $xf.options.thumbnail_width }} ; height: {{ $thread.Forum.Node.node_thread_thumbnail_height ? $thread.Forum.Node.node_thread_thumbnail_height : $xf.options.thumb_size_hemant }}; object-fit: cover; border-bottom: solid 2px #fa7d24" loading="lazy">
										</xf:foreach>
									</div>
								</div>
							</a>
						</xf:if>
						<spam class="containers">
							<spam class="leftDiv">
								<xf:if is="$thread.prefix_id">
									{{ prefix('thread', $thread, 'html', 'noStatus') }}
								</xf:if>
							</spam>
							<spam class="rightDiv">
								<xf:if is="$thread.prefix_id">
									{{ prefix('thread', $thread, 'html', 'isStatus') }} 

									<xf:if is="$xf.options.fs_latest_thread_custom_field_ver && $xf.visitor.version_style == 'small' && {$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}">
										<spam style="background-color: #3f4043; padding: 0px 6px;">{$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}</spam>
									</xf:if>
								</xf:if>
							</spam>
						</spam>
					</div>
				</div>

			</xf:if>
		</xf:extension>

		<xf:extension name="main_cell">
			<div class="structItem-cell structItem-cell--main" data-xf-init="touch-proxy">

				<xf:if contentcheck="true">
					<ul class="structItem-statuses">
						<xf:contentcheck>
							<xf:extension name="statuses">
								<xf:if is="property('reactionSummaryOnLists') == 'status' && $thread.first_post_reactions">
									<li><xf:reactions summary="true" reactions="{$thread.first_post_reactions}" /></li>
								</xf:if>
								<xf:extension name="before_status_state"></xf:extension>
								<xf:if is="$thread.discussion_state == 'moderated'">
									<li>
										<xf:set var="$moderatedStatus">
											<i class="structItem-status structItem-status--moderated" aria-hidden="true" title="{{ phrase('awaiting_approval')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('awaiting_approval') }}</span>
										</xf:set>
										<xf:if is="$thread.canCleanSpam()">
											<a href="{{ link('spam-cleaner', $thread) }}" data-xf-click="overlay">{$moderatedStatus}</a>
											<xf:else />
											{$moderatedStatus}
										</xf:if>
									</li>
								</xf:if>
								<xf:if is="$thread.discussion_state == 'deleted'">
									<li>
										<i class="structItem-status structItem-status--deleted" aria-hidden="true" title="{{ phrase('deleted')|for_attr }}"></i>
										<span class="u-srOnly">{{ phrase('deleted') }}</span>
									</li>
								</xf:if>
								<xf:if is="!$thread.discussion_open">
									<li>
										<i class="structItem-status structItem-status--locked" aria-hidden="true" title="{{ phrase('locked')|for_attr }}"></i>
										<span class="u-srOnly">{{ phrase('locked') }}</span>
									</li>
								</xf:if>

								<xf:extension name="status_sticky">
									<xf:if is="$thread.sticky">
										<li>
											<i class="structItem-status structItem-status--sticky" aria-hidden="true" title="{{ phrase('sticky')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('sticky') }}</span>
										</li>
									</xf:if>
								</xf:extension>

								<xf:extension name="before_status_watch"></xf:extension>
								<xf:if is="{$showWatched} AND {$xf.visitor.user_id}">
									<xf:if is="{$thread.Watch.{$xf.visitor.user_id}}">
										<li>
											<i class="structItem-status structItem-status--watched" aria-hidden="true" title="{{ phrase('thread_watched')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('thread_watched') }}</span>
										</li>
										<xf:elseif is="!$forum AND {$thread.Forum.Watch.{$xf.visitor.user_id}}" />
										<li>
											<i class="structItem-status structItem-status--watched" aria-hidden="true" title="{{ phrase('forum_watched')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('forum_watched') }}</span>
										</li>
									</xf:if>
								</xf:if>

								<xf:extension name="before_status_type"></xf:extension>
								<xf:if is="$thread.discussion_type == 'redirect'">
									<xf:extension name="thread_type_redirect">
										<li>
											<i class="structItem-status structItem-status--redirect" aria-hidden="true" title="{{ phrase('redirect')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('redirect') }}</span>
										</li>
									</xf:extension>
									<xf:elseif is="$thread.discussion_type == 'question' && $thread.type_data.solution_post_id" />
									<xf:extension name="thread_type_question_solved">
										<li>
											<i class="structItem-status structItem-status--solved" aria-hidden="true" title="{{ phrase('solved')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('solved') }}</span>
										</li>
									</xf:extension>
									<xf:elseif is="!$forum || $forum.forum_type_id == 'discussion'" />
									<xf:extension name="thread_type_icon">
										<xf:if is="$thread.discussion_type != 'discussion'">
											<xf:set var="$threadTypeHandler" value="{{ $thread.getTypeHandler() }}" />
											<xf:if is="$threadTypeHandler.getTypeIconClass()">
												<li>
													<xf:set var="$threadTypePhrase" value="{{ $threadTypeHandler.getTypeTitle() }}" />
													<xf:fa class="structItem-status" icon="{{ $threadTypeHandler.getTypeIconClass() }}" title="{$threadTypePhrase|for_attr}" />
													<span class="u-srOnly">{$threadTypePhrase}</span>
												</li>
											</xf:if>
										</xf:if>
									</xf:extension>
								</xf:if>
							</xf:extension>
						</xf:contentcheck>
					</ul>
				</xf:if>

				<div class="structItem-title" style="margin-top: 12px;">
					<xf:set var="$canPreview" value="{{ $thread.canPreview() }}" />

					<a href="{{ link('threads' . (($thread.isUnread() AND !$forceRead) ? '/unread' : ''), $thread) }}" target="{{$xf.visitor.new_tab == 'yes' ? '_blank' : '_self'}}" class="" data-tp-primary="on" data-xf-init="{{ $canPreview ? 'preview-tooltip' : '' }}" data-preview-url="{{ $canPreview ? link('threads/preview', $thread) : '' }}">{{ snippet($thread.title, 25, {'stripBbCode': true}) }}</a>
					<xf:if is="$xf.options.fs_latest_thread_custom_field_ver && $xf.visitor.version_style == 'large' && {$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}">
						<spam class="field_game_title">{$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}</spam>
					</xf:if>
				</div>

				<div class="structItem-minor">
					<xf:if contentcheck="true">
						<ul class="structItem-extraInfo">
							<xf:contentcheck>
								<xf:if is="property('reactionSummaryOnLists') == 'minor_opposite' && $thread.first_post_reactions">
									<li><xf:reactions summary="true" reactions="{$thread.first_post_reactions}" /></li>
								</xf:if>
								<xf:if is="{$extraInfo}">
									<li>{$extraInfo}</li>
									<xf:elseif is="$allowEdit AND $thread.canEdit() AND $thread.canUseInlineModeration()" />
									<xf:if is="!$allowInlineMod OR !$forum">
										<xf:set var="$editParams" value="{{ {
																		 '_xfNoInlineMod': !$allowInlineMod ? 1 : null,
																		 '_xfForumName': !$forum ? 1 : 0
																		 } }}" />
										<xf:else />
										<xf:set var="$editParams" value="{{ [] }}" />
									</xf:if>
									<xf:if is="$thread.discussion_type != 'redirect'">
										<li class="structItem-extraInfoMinor">
											<a href="{{ link('threads/edit', $thread) }}" data-xf-click="overlay" data-cache="false" data-href="{{ link('threads/edit', $thread, $editParams) }}">
												{{ phrase('edit') }}
											</a>
										</li>
									</xf:if>
								</xf:if>
								<xf:if is="$chooseName">
									<li><xf:checkbox standalone="true">
										<xf:option name="{$chooseName}[]" value="{$thread.thread_id}" class="js-chooseItem" />
										</xf:checkbox></li>
									<xf:elseif is="$allowInlineMod AND $thread.canUseInlineModeration()" />
									<li><xf:checkbox standalone="true">
										<xf:option value="{$thread.thread_id}" class="js-inlineModToggle"
												   data-xf-init="tooltip"
												   title="{{ phrase('select_for_moderation') }}"
												   label="{{ phrase('select_for_moderation') }}"
												   hiddenlabel="true"
												   />
										</xf:checkbox></li>
								</xf:if>
							</xf:contentcheck>
						</ul>
					</xf:if>

					<xf:if is="$thread.discussion_state == 'deleted'">
						<xf:if is="{$extraInfo}"><span class="structItem-extraInfo">{$extraInfo}</span></xf:if>

						<xf:macro template="deletion_macros" name="notice" arg-log="{$thread.DeletionLog}" />
						<xf:else />
						<ul class="structItem-parts">
							<li class="structItem-startDate">
								<xf:fa icon="fas fa-clock" title="{{ phrase('start_date')|for_attr }}" />
								<span class="u-srOnly">{{ phrase('start_date') }}</span>
								<a href="{{ link('threads', $thread) }}" rel="nofollow">{$thread.getTimeStampThread()}</a>
							</li>
							<li>
								<xf:fa icon="fas fa-thumbs-up" /> {$thread.first_post_reaction_score}
							</li>
							<li>
								<xf:fa icon="fas fa-eye" /> {$thread.getViewCountKM()}
							</li>
							<li>
								<xf:fa icon="fas fa-star" /> {$thread.brivium_rating_count}
							</li>
						</ul>

					</xf:if>
				</div>

				<div class="hiddenDiv" style="margin-bottom: 5px !important;">


					<hr class="formRowSep" style="margin: 10px 0px;"/>

					<xf:if is="$xf.options.fs_latest_thread_custom_field_game">
						<spam>{$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_game}}</spam>
						<br/>
					</xf:if>

					<ul class="structItem-parts">
						<xf:if is="$xf.options.enableTagging AND ($thread.canEditTags() OR $thread.tags)">
							<xf:css src="avForumsTagEss_thread_view_grouped_tags.less" />

							<xf:if is="$thread.GroupedTags">
								<xf:foreach loop="$thread.GroupedTags" key="$categoryId" value="$groupedTagsData">
									<li class="groupedTags">
										<xf:foreach loop="$groupedTagsData.tags" value="$groupedTag">
											<a href="{{ link('tags', $groupedTag) }}" data-xf-init="preview-tooltip" data-preview-url="{{ link('tags/preview', $groupedTag) }}" class="tagItem" dir="auto">{$groupedTag.tag}</a>
										</xf:foreach>
									</li>
								</xf:foreach>
							</xf:if>
						</xf:if>
					</ul>
				</div>

			</div>
		</xf:extension>

	</div>

	<script>
		// Function to initialize sliders
		function initializeSliders() {
			const sliders = document.querySelectorAll('.slider-container');

			sliders.forEach((sliderContainer) => {
				const slider = sliderContainer.querySelector('.slider');
				const images = slider.getElementsByTagName('img');
				const imageCount = images.length;
				let currentIndex = 0;

				const slideNumber = sliderContainer.querySelector('.slide-number');

				function changeSlide(index) {
					for (let img of images) {
						img.classList.remove('active');
					}
					images[index].classList.add('active');
					slideNumber.textContent = `${index + 1}/${imageCount}`;
				}

				sliderContainer.addEventListener('mouseenter', function() {
					currentIndex = 0;
					changeSlide(currentIndex);

					const intervalId = setInterval(() => {
						currentIndex++;
						if (currentIndex >= imageCount) {
							currentIndex = 0;
						}
						changeSlide(currentIndex);
					}, 3000);

					sliderContainer.addEventListener('mouseleave', function() {
						clearInterval(intervalId);
						changeSlide(0);
					}, { once: true });
				});
			});
		}

		// Initialize all sliders on the page
		window.onload = initializeSliders;
	</script>
</xf:macro>

<xf:macro name="list"
		  arg-thread="!"
		  arg-forum=""
		  arg-forceRead="{{ false }}"
		  arg-showWatched="{{ true }}"
		  arg-allowInlineMod="{{ true }}"
		  arg-chooseName=""
		  arg-extraInfo=""
		  arg-allowEdit="{{ true }}">
	<xf:css src="structured_list.less" />
	<xf:css src="fs_auction_list_view.less" />

	<style>
		.hiddenDivList {
			display: none;
			position: absolute; 
			width: -webkit-fill-available;  
			background-color: #17202f;
			padding: 10px;
			z-index: 100; 
			border-radius: 5px;
		}

		.onHoverDispList:hover .hiddenDivList {
			display: block;
		}

		.onHoverDispList:hover .hideUpdateImg {
			display: none;
		}

		.dispUpdateSlider {
			display: none;
		}

		.onHoverDispList:hover .dispUpdateSlider {
			display: block;
		}

		.onHoverDispList {
			position: relative;
			transition: transform 0.15s ease-in-out;
		}
		
		.onHoverDispList:hover {
			transform: scale(1.01);  
			z-index: 1;
		}	
		
		.field_game_title {
			color: #9398a0;
			margin: 0 0 0 5px;
			white-space: nowrap;
		}

		.userNameThread{
			font-size: .85em;
			font-weight: 400;
			line-height: 20px;
			float: right;
		}
		
		.listContainers {
			position: relative;
			display: flex;
			justify-content: space-between;
			margin: 0 0 20px 0;
			top: 10px;
			padding: 0 10px;
		}
		
		.slider-container {
			width: 100%;
			max-width: 600px;
			overflow: hidden; 
			position: relative; 
			margin: 5px auto; 
		}

		.slider {
			display: flex;
			transition: transform 0.5s ease-in-out; 
		}

		.slider img {
			width: 100%; 
			flex-shrink: 0; 
			height: 300px; 
			object-fit: cover; 
		}

		.slider img {
			display: none !important;
		}

		.slider img.active {
			display: block !important; 
		}

		.slide-number {
			position: absolute;
			top: 3px;
			left: 7px;
			background: rgba(0, 0, 0, 0.5); 
			color: white;
			padding: 3px 5px;
			border-radius: 3px;
			font-size: 10px;
			font-weight: bold;
		}
	</style>
	<div class="block-container onHoverDispList">
		<div class="block-body ">

			<div class="structItem structItem--listing js-inlineModContainer" data-author="{{ $thread.username ?: '' }}">
				<div class="structItem-cell structItem-cell--icon structItem-cell--iconExpanded structItem-cell--iconListingCoverImage" style="width: 25%;">
					<div class="structItem-iconContainer">
						<a href="{{ link('threads', $thread) }}" target="{{$xf.visitor.new_tab == 'yes' ? '_blank' : '_self'}}"> 
							<img src="{$thread.getfirstPostImgUrl()}" class="{{count($thread.FirstPost.Attachments) > 1 ? 'hideUpdateImg' : ' '}}" style="width: {{ $thread.Forum.Node.node_thread_thumbnail_width ? $thread.Forum.Node.node_thread_thumbnail_width : $xf.options.thumbnail_width }} ; height: {{ $thread.Forum.Node.node_thread_thumbnail_height ? $thread.Forum.Node.node_thread_thumbnail_height : $xf.options.thumb_size_hemant }}; object-fit: cover; border-bottom: solid 2px #fa7d24">
						</a>
						<xf:if is="count($thread.FirstPost.Attachments) > 1">
							<a href="{{ link('threads', $thread) }}" target="{{$xf.visitor.new_tab == 'yes' ? '_blank' : '_self'}}"> 
								<div class="slider-container dispUpdateSlider" id="slider-container">
									<!-- Numbering Display -->
									<div class="slide-number" id="slide-number"></div>
									<div class="slider" id="slider">
										<xf:foreach loop="$thread.FirstPost.Attachments" value="$attachment" i="$i" if="$attachment.has_thumbnail">
											<img src="{$attachment.thumbnail_url}?{{($xf.time + $i)}}" class="{{$i == 1 ? 'active' : ' '}}" alt="{$attachment.filename}" style="width: {{ $thread.Forum.Node.node_thread_thumbnail_width ? $thread.Forum.Node.node_thread_thumbnail_width : $xf.options.thumbnail_width }} ; height: {{ $thread.Forum.Node.node_thread_thumbnail_height ? $thread.Forum.Node.node_thread_thumbnail_height : $xf.options.thumb_size_hemant }}; object-fit: cover; border-bottom: solid 2px #fa7d24" loading="lazy">
										</xf:foreach>
									</div>
								</div>
							</a>
						</xf:if>

					</div>
				</div>


				<div class="structItem-cell structItem-cell--main" data-xf-init="touch-proxy">

					<xf:if contentcheck="true">
						<ul class="structItem-statuses">
							<xf:contentcheck>
								<xf:extension name="statuses">
									<xf:if is="property('reactionSummaryOnLists') == 'status' && $thread.first_post_reactions">
										<li><xf:reactions summary="true" reactions="{$thread.first_post_reactions}" /></li>
									</xf:if>
									<xf:extension name="before_status_state"></xf:extension>
									<xf:if is="$thread.discussion_state == 'moderated'">
										<li>
											<xf:set var="$moderatedStatus">
												<i class="structItem-status structItem-status--moderated" aria-hidden="true" title="{{ phrase('awaiting_approval')|for_attr }}"></i>
												<span class="u-srOnly">{{ phrase('awaiting_approval') }}</span>
											</xf:set>
											<xf:if is="$thread.canCleanSpam()">
												<a href="{{ link('spam-cleaner', $thread) }}" data-xf-click="overlay">{$moderatedStatus}</a>
												<xf:else />
												{$moderatedStatus}
											</xf:if>
										</li>
									</xf:if>
									<xf:if is="$thread.discussion_state == 'deleted'">
										<li>
											<i class="structItem-status structItem-status--deleted" aria-hidden="true" title="{{ phrase('deleted')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('deleted') }}</span>
										</li>
									</xf:if>
									<xf:if is="!$thread.discussion_open">
										<li>
											<i class="structItem-status structItem-status--locked" aria-hidden="true" title="{{ phrase('locked')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('locked') }}</span>
										</li>
									</xf:if>

									<xf:extension name="status_sticky">
										<xf:if is="$thread.sticky">
											<li>
												<i class="structItem-status structItem-status--sticky" aria-hidden="true" title="{{ phrase('sticky')|for_attr }}"></i>
												<span class="u-srOnly">{{ phrase('sticky') }}</span>
											</li>
										</xf:if>
									</xf:extension>

									<xf:extension name="before_status_watch"></xf:extension>
									<xf:if is="{$showWatched} AND {$xf.visitor.user_id}">
										<xf:if is="{$thread.Watch.{$xf.visitor.user_id}}">
											<li>
												<i class="structItem-status structItem-status--watched" aria-hidden="true" title="{{ phrase('thread_watched')|for_attr }}"></i>
												<span class="u-srOnly">{{ phrase('thread_watched') }}</span>
											</li>
											<xf:elseif is="!$forum AND {$thread.Forum.Watch.{$xf.visitor.user_id}}" />
											<li>
												<i class="structItem-status structItem-status--watched" aria-hidden="true" title="{{ phrase('forum_watched')|for_attr }}"></i>
												<span class="u-srOnly">{{ phrase('forum_watched') }}</span>
											</li>
										</xf:if>
									</xf:if>

									<xf:extension name="before_status_type"></xf:extension>
									<xf:if is="$thread.discussion_type == 'redirect'">
										<xf:extension name="thread_type_redirect">
											<li>
												<i class="structItem-status structItem-status--redirect" aria-hidden="true" title="{{ phrase('redirect')|for_attr }}"></i>
												<span class="u-srOnly">{{ phrase('redirect') }}</span>
											</li>
										</xf:extension>
										<xf:elseif is="$thread.discussion_type == 'question' && $thread.type_data.solution_post_id" />
										<xf:extension name="thread_type_question_solved">
											<li>
												<i class="structItem-status structItem-status--solved" aria-hidden="true" title="{{ phrase('solved')|for_attr }}"></i>
												<span class="u-srOnly">{{ phrase('solved') }}</span>
											</li>
										</xf:extension>
										<xf:elseif is="!$forum || $forum.forum_type_id == 'discussion'" />
										<xf:extension name="thread_type_icon">
											<xf:if is="$thread.discussion_type != 'discussion'">
												<xf:set var="$threadTypeHandler" value="{{ $thread.getTypeHandler() }}" />
												<xf:if is="$threadTypeHandler.getTypeIconClass()">
													<li>
														<xf:set var="$threadTypePhrase" value="{{ $threadTypeHandler.getTypeTitle() }}" />
														<xf:fa class="structItem-status" icon="{{ $threadTypeHandler.getTypeIconClass() }}" title="{$threadTypePhrase|for_attr}" />
														<span class="u-srOnly">{$threadTypePhrase}</span>
													</li>
												</xf:if>
											</xf:if>
										</xf:extension>
									</xf:if>
								</xf:extension>
							</xf:contentcheck>
						</ul>
					</xf:if>

					<spam class="listContainers">
						<spam class="leftDiv">
							<xf:if is="$thread.prefix_id">
								{{ prefix('thread', $thread, 'html', 'noStatus') }}
							</xf:if>
						</spam>
						<spam class="rightDiv">
							<xf:if is="$thread.prefix_id">
								{{ prefix('thread', $thread, 'html', 'isStatus') }} 

								<xf:if is="$xf.options.fs_latest_thread_custom_field_ver && $xf.visitor.version_style == 'small' && {$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}">
									<spam style="background-color: #3f4043; padding: 0px 6px;">{$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}</spam>
								</xf:if>
							</xf:if>
						</spam>
					</spam>

					<div class="structItem-title" style="margin-top: 12px;">
						<xf:set var="$canPreview" value="{{ $thread.canPreview() }}" />

						<a href="{{ link('threads' . (($thread.isUnread() AND !$forceRead) ? '/unread' : ''), $thread) }}" target="{{$xf.visitor.new_tab == 'yes' ? '_blank' : '_self'}}" class="" data-tp-primary="on" data-xf-init="{{ $canPreview ? 'preview-tooltip' : '' }}" data-preview-url="{{ $canPreview ? link('threads/preview', $thread) : '' }}">{{ snippet($thread.title, 100, {'stripBbCode': true}) }}</a>
						<xf:if is="$xf.options.fs_latest_thread_custom_field_ver && $xf.visitor.version_style == 'large' && {$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}">
							<spam class="field_game_title">{$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}</spam>
						</xf:if>
						<span class="userNameThread">
							<xf:username user="$thread.User" defaultname="{$thread.User}" />
						</span>
					</div>

					<div class="structItem-minor">
						<xf:if contentcheck="true">
							<ul class="structItem-extraInfo">
								<xf:contentcheck>
									<xf:if is="property('reactionSummaryOnLists') == 'minor_opposite' && $thread.first_post_reactions">
										<li><xf:reactions summary="true" reactions="{$thread.first_post_reactions}" /></li>
									</xf:if>
									<xf:if is="{$extraInfo}">
										<li>{$extraInfo}</li>
										<xf:elseif is="$allowEdit AND $thread.canEdit() AND $thread.canUseInlineModeration()" />
										<xf:if is="!$allowInlineMod OR !$forum">
											<xf:set var="$editParams" value="{{ {
																			 '_xfNoInlineMod': !$allowInlineMod ? 1 : null,
																			 '_xfForumName': !$forum ? 1 : 0
																			 } }}" />
											<xf:else />
											<xf:set var="$editParams" value="{{ [] }}" />
										</xf:if>
										<xf:if is="$thread.discussion_type != 'redirect'">
											<li class="structItem-extraInfoMinor">
												<a href="{{ link('threads/edit', $thread) }}" data-xf-click="overlay" data-cache="false" data-href="{{ link('threads/edit', $thread, $editParams) }}">
													{{ phrase('edit') }}
												</a>
											</li>
										</xf:if>
									</xf:if>
									<xf:if is="$chooseName">
										<li><xf:checkbox standalone="true">
											<xf:option name="{$chooseName}[]" value="{$thread.thread_id}" class="js-chooseItem" />
											</xf:checkbox></li>
										<xf:elseif is="$allowInlineMod AND $thread.canUseInlineModeration()" />
										<li><xf:checkbox standalone="true">
											<xf:option value="{$thread.thread_id}" class="js-inlineModToggle"
													   data-xf-init="tooltip"
													   title="{{ phrase('select_for_moderation') }}"
													   label="{{ phrase('select_for_moderation') }}"
													   hiddenlabel="true"
													   />
											</xf:checkbox></li>
									</xf:if>
								</xf:contentcheck>
							</ul>
						</xf:if>

						<xf:if is="$thread.discussion_state == 'deleted'">
							<xf:if is="{$extraInfo}"><span class="structItem-extraInfo">{$extraInfo}</span></xf:if>

							<xf:macro template="deletion_macros" name="notice" arg-log="{$thread.DeletionLog}" />
							<xf:else />
							<ul class="structItem-parts">
								<li class="structItem-startDate">
									<xf:fa icon="fas fa-clock" title="{{ phrase('start_date')|for_attr }}" />
									<span class="u-srOnly">{{ phrase('start_date') }}</span>
									<a href="{{ link('threads', $thread) }}" rel="nofollow">{$thread.getTimeStampThread()}</a>
								</li>
								<li>
									<xf:fa icon="fas fa-thumbs-up" /> {$thread.first_post_reaction_score}
								</li>
								<li>
									<xf:fa icon="fas fa-eye" /> {$thread.getViewCountKM()}
								</li>
								<li>
									<xf:fa icon="fas fa-star" /> {$thread.brivium_rating_count}
								</li>
							</ul>

						</xf:if>
					</div>

				</div>


			</div>

			<div class="hiddenDivList" style="margin-bottom: 5px !important;">

				<hr class="formRowSep" style="    margin: 10px 0px;;"/>

				<xf:if is="$xf.options.fs_latest_thread_custom_field_game">
					<spam>{$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_game}}</spam>
					<br/>
				</xf:if>

				<ul class="structItem-parts">
					<xf:if is="$xf.options.enableTagging AND ($thread.canEditTags() OR $thread.tags)">
						<xf:css src="avForumsTagEss_thread_view_grouped_tags.less" />

						<xf:if is="$thread.GroupedTags">
							<xf:foreach loop="$thread.GroupedTags" key="$categoryId" value="$groupedTagsData">
								<li class="groupedTags">
									<xf:foreach loop="$groupedTagsData.tags" value="$groupedTag">
										<a href="{{ link('tags', $groupedTag) }}" data-xf-init="preview-tooltip" data-preview-url="{{ link('tags/preview', $groupedTag) }}" class="tagItem" dir="auto">{$groupedTag.tag}</a>
									</xf:foreach>
								</li>
							</xf:foreach>
						</xf:if>
					</xf:if>
				</ul>
			</div>

		</div>
	</div>

	<script>
		// Function to initialize sliders
		function initializeSliders() {
			const sliders = document.querySelectorAll('.slider-container');

			sliders.forEach((sliderContainer) => {
				const slider = sliderContainer.querySelector('.slider');
				const images = slider.getElementsByTagName('img');
				const imageCount = images.length;
				let currentIndex = 0;

				const slideNumber = sliderContainer.querySelector('.slide-number');

				function changeSlide(index) {
					for (let img of images) {
						img.classList.remove('active');
					}
					images[index].classList.add('active');
					slideNumber.textContent = `${index + 1}/${imageCount}`;
				}

				sliderContainer.addEventListener('mouseenter', function() {
					currentIndex = 0;
					changeSlide(currentIndex);

					const intervalId = setInterval(() => {
						currentIndex++;
						if (currentIndex >= imageCount) {
							currentIndex = 0;
						}
						changeSlide(currentIndex);
					}, 3000);

					sliderContainer.addEventListener('mouseleave', function() {
						clearInterval(intervalId);
						changeSlide(0);
					}, { once: true });
				});
			});
		}

		// Initialize all sliders on the page
		window.onload = initializeSliders;
	</script>

</xf:macro>]]></template>
  <template type="public" title="fs_latest_thread_slider_macros" version_id="1000500" version_string="1.0.5 Alpha"><![CDATA[<xf:macro name="slider"
		  arg-thread="!"
		  arg-forum=""
		  arg-forceRead="{{ false }}"
		  arg-showWatched="{{ true }}"
		  arg-allowInlineMod="{{ true }}"
		  arg-chooseName=""
		  arg-extraInfo=""
		  arg-allowEdit="{{ true }}">

	<xf:css src="structured_list.less" />

	<style>
		.hiddenDivSlider {
			display: none;
			position: absolute; 
			left: 0;
			width: 100%;  
			background-color: #17202f;
			padding: 10px;
			z-index: 1000; 
			border-radius: 5px;
		}

		.onHoverDispSlider:hover .hiddenDivSlider {
			display: block;
		}

		.onHoverDispSlider:hover .hideUpdateImg {
			display: none;
		}

		.dispUpdateSlider {
			display: none;
		}

		.onHoverDispSlider:hover .dispUpdateSlider {
			display: block;
		}

		.containersSlider {
			position: relative;
			top: -14px;
			display: flex;
			justify-content: space-between;
			margin: 0px 7px;
		}

		.onHoverDispSlider {
			position: relative;
			transition: transform 0.15s ease-in-out;
			z-index: 1;
		}
		.onHoverDispSlider:hover {
			transform: scale(1.03);  
		}	

		.slider-container {
			width: 100%;
			max-width: 600px;
			overflow: hidden; 
			position: relative; 
			margin: 5px auto; 
		}

		.slider {
			display: flex;
			transition: transform 0.5s ease-in-out; 
		}

		.slider img {
			width: 100%; 
			flex-shrink: 0; 
			height: 300px; 
			object-fit: cover; 
		}

		.slider img {
			display: none !important;
		}

		.slider img.active {
			display: block !important; 
		}

		.slide-number {
			position: absolute;
			top: 3px;
			left: 7px;
			background: rgba(0, 0, 0, 0.5); 
			color: white;
			padding: 3px 5px;
			border-radius: 3px;
			font-size: 10px;
			font-weight: bold;
		}

		.field_game_title {
			color: #9398a0;
			margin: 0 0 0 5px;
			white-space: nowrap;
		}
	</style>

	<div class="structItem structItem--thread{{ $thread.prefix_id ? ' is-prefix' . $thread.prefix_id : '' }}{{ $thread.isIgnored() ? ' is-ignored' : '' }}{{ ($thread.isUnread() AND !$forceRead) ? ' is-unread' : '' }}{{ $thread.discussion_state == 'moderated' ? ' is-moderated' : '' }}{{ $thread.discussion_state == 'deleted' ? ' is-deleted' : '' }} js-inlineModContainer js-threadListItem-{$thread.thread_id} onHoverDispSlider" data-author="{{ $thread.User.username ?: $thread.username }}">

		<xf:extension name="icon_cell">
			<xf:if is="in_array($thread.node_id, $xf.options.node_id_for_thumb)" >

				<div class="structItem-cell structItem-cell--icon" style="width: {{ $thread.Forum.Node.node_thread_thumbnail_width ? $thread.Forum.Node.node_thread_thumbnail_width : $xf.options.thumbnail_width }}; height: {{ $thread.Forum.Node.node_thread_thumbnail_height ? $thread.Forum.Node.node_thread_thumbnail_height : $xf.options.thumb_size_hemant }};">

					<div class="structItem-iconContainer">
						<a href="{{ link('threads', $thread) }}" target="{{$xf.visitor.new_tab == 'yes' ? '_blank' : '_self'}}"> 
							<img src="{$thread.getfirstPostImgUrl()}" class="{{count($thread.FirstPost.Attachments) > 1 ? 'hideUpdateImg' : ' '}}" style="width: {{ $thread.Forum.Node.node_thread_thumbnail_width ? $thread.Forum.Node.node_thread_thumbnail_width : $xf.options.thumbnail_width }} ; height: {{ $thread.Forum.Node.node_thread_thumbnail_height ? $thread.Forum.Node.node_thread_thumbnail_height : $xf.options.thumb_size_hemant }}; object-fit: cover; border-bottom: solid 2px #fa7d24">
						</a>
						<xf:if is="count($thread.FirstPost.Attachments) > 1">
							<a href="{{ link('threads', $thread) }}" target="{{$xf.visitor.new_tab == 'yes' ? '_blank' : '_self'}}"> 
								<div class="slider-container dispUpdateSlider" id="slider-container">
									<!-- Numbering Display -->
									<div class="slide-number" id="slide-number"></div>
									<div class="slider" id="slider">
										<xf:foreach loop="$thread.FirstPost.Attachments" value="$attachment" i="$i" if="$attachment.has_thumbnail">
											<img src="{$attachment.thumbnail_url}?{{($xf.time + $i)}}" class="{{$i == 1 ? 'active' : ' '}}" alt="{$attachment.filename}" style="width: {{ $thread.Forum.Node.node_thread_thumbnail_width ? $thread.Forum.Node.node_thread_thumbnail_width : $xf.options.thumbnail_width }} ; height: {{ $thread.Forum.Node.node_thread_thumbnail_height ? $thread.Forum.Node.node_thread_thumbnail_height : $xf.options.thumb_size_hemant }}; object-fit: cover; border-bottom: solid 2px #fa7d24" loading="lazy">
										</xf:foreach>
									</div>
								</div>
							</a>
						</xf:if>
						<spam class="containersSlider">
							<spam class="leftDiv">
								<xf:if is="$thread.prefix_id">
									{{ prefix('thread', $thread, 'html', 'noStatus') }}
								</xf:if>
							</spam>
							<spam class="rightDiv">
								<xf:if is="$thread.prefix_id">
									{{ prefix('thread', $thread, 'html', 'isStatus') }} 

									<xf:if is="$xf.options.fs_latest_thread_custom_field_ver && $xf.visitor.version_style == 'small' && {$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}">
										<spam style="background-color: #3f4043; padding: 0px 6px;">{$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}</spam>
									</xf:if>
								</xf:if>
							</spam>
						</spam>
					</div>
				</div>

			</xf:if>
		</xf:extension>

		<xf:extension name="main_cell">
			<div class="structItem-cell structItem-cell--main" data-xf-init="touch-proxy">

				<xf:if contentcheck="true">
					<ul class="structItem-statuses">
						<xf:contentcheck>
							<xf:extension name="statuses">
								<xf:if is="property('reactionSummaryOnLists') == 'status' && $thread.first_post_reactions">
									<li><xf:reactions summary="true" reactions="{$thread.first_post_reactions}" /></li>
								</xf:if>
								<xf:extension name="before_status_state"></xf:extension>
								<xf:if is="$thread.discussion_state == 'moderated'">
									<li>
										<xf:set var="$moderatedStatus">
											<i class="structItem-status structItem-status--moderated" aria-hidden="true" title="{{ phrase('awaiting_approval')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('awaiting_approval') }}</span>
										</xf:set>
										<xf:if is="$thread.canCleanSpam()">
											<a href="{{ link('spam-cleaner', $thread) }}" data-xf-click="overlay">{$moderatedStatus}</a>
											<xf:else />
											{$moderatedStatus}
										</xf:if>
									</li>
								</xf:if>
								<xf:if is="$thread.discussion_state == 'deleted'">
									<li>
										<i class="structItem-status structItem-status--deleted" aria-hidden="true" title="{{ phrase('deleted')|for_attr }}"></i>
										<span class="u-srOnly">{{ phrase('deleted') }}</span>
									</li>
								</xf:if>
								<xf:if is="!$thread.discussion_open">
									<li>
										<i class="structItem-status structItem-status--locked" aria-hidden="true" title="{{ phrase('locked')|for_attr }}"></i>
										<span class="u-srOnly">{{ phrase('locked') }}</span>
									</li>
								</xf:if>

								<xf:extension name="status_sticky">
									<xf:if is="$thread.sticky">
										<li>
											<i class="structItem-status structItem-status--sticky" aria-hidden="true" title="{{ phrase('sticky')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('sticky') }}</span>
										</li>
									</xf:if>
								</xf:extension>

								<xf:extension name="before_status_watch"></xf:extension>
								<xf:if is="{$showWatched} AND {$xf.visitor.user_id}">
									<xf:if is="{$thread.Watch.{$xf.visitor.user_id}}">
										<li>
											<i class="structItem-status structItem-status--watched" aria-hidden="true" title="{{ phrase('thread_watched')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('thread_watched') }}</span>
										</li>
										<xf:elseif is="!$forum AND {$thread.Forum.Watch.{$xf.visitor.user_id}}" />
										<li>
											<i class="structItem-status structItem-status--watched" aria-hidden="true" title="{{ phrase('forum_watched')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('forum_watched') }}</span>
										</li>
									</xf:if>
								</xf:if>

								<xf:extension name="before_status_type"></xf:extension>
								<xf:if is="$thread.discussion_type == 'redirect'">
									<xf:extension name="thread_type_redirect">
										<li>
											<i class="structItem-status structItem-status--redirect" aria-hidden="true" title="{{ phrase('redirect')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('redirect') }}</span>
										</li>
									</xf:extension>
									<xf:elseif is="$thread.discussion_type == 'question' && $thread.type_data.solution_post_id" />
									<xf:extension name="thread_type_question_solved">
										<li>
											<i class="structItem-status structItem-status--solved" aria-hidden="true" title="{{ phrase('solved')|for_attr }}"></i>
											<span class="u-srOnly">{{ phrase('solved') }}</span>
										</li>
									</xf:extension>
									<xf:elseif is="!$forum || $forum.forum_type_id == 'discussion'" />
									<xf:extension name="thread_type_icon">
										<xf:if is="$thread.discussion_type != 'discussion'">
											<xf:set var="$threadTypeHandler" value="{{ $thread.getTypeHandler() }}" />
											<xf:if is="$threadTypeHandler.getTypeIconClass()">
												<li>
													<xf:set var="$threadTypePhrase" value="{{ $threadTypeHandler.getTypeTitle() }}" />
													<xf:fa class="structItem-status" icon="{{ $threadTypeHandler.getTypeIconClass() }}" title="{$threadTypePhrase|for_attr}" />
													<span class="u-srOnly">{$threadTypePhrase}</span>
												</li>
											</xf:if>
										</xf:if>
									</xf:extension>
								</xf:if>
							</xf:extension>
						</xf:contentcheck>
					</ul>
				</xf:if>

				<div class="structItem-title" style="margin-top: 12px;">
					<xf:set var="$canPreview" value="{{ $thread.canPreview() }}" />

					<a href="{{ link('threads' . (($thread.isUnread() AND !$forceRead) ? '/unread' : ''), $thread) }}" target="{{$xf.visitor.new_tab == 'yes' ? '_blank' : '_self'}}" class="" data-tp-primary="on" data-xf-init="{{ $canPreview ? 'preview-tooltip' : '' }}" data-preview-url="{{ $canPreview ? link('threads/preview', $thread) : '' }}">{{ snippet($thread.title, 25, {'stripBbCode': true}) }}</a>
					<xf:if is="$xf.options.fs_latest_thread_custom_field_ver && $xf.visitor.version_style == 'large' && {$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}">
						<spam class="field_game_title">{$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_ver}}</spam>
					</xf:if>
				</div>

				<div class="structItem-minor">
					<xf:if contentcheck="true">
						<ul class="structItem-extraInfo">
							<xf:contentcheck>
								<xf:if is="property('reactionSummaryOnLists') == 'minor_opposite' && $thread.first_post_reactions">
									<li><xf:reactions summary="true" reactions="{$thread.first_post_reactions}" /></li>
								</xf:if>
								<xf:if is="{$extraInfo}">
									<li>{$extraInfo}</li>
									<xf:elseif is="$allowEdit AND $thread.canEdit() AND $thread.canUseInlineModeration()" />
									<xf:if is="!$allowInlineMod OR !$forum">
										<xf:set var="$editParams" value="{{ {
																		 '_xfNoInlineMod': !$allowInlineMod ? 1 : null,
																		 '_xfForumName': !$forum ? 1 : 0
																		 } }}" />
										<xf:else />
										<xf:set var="$editParams" value="{{ [] }}" />
									</xf:if>
									<xf:if is="$thread.discussion_type != 'redirect'">
										<li class="structItem-extraInfoMinor">
											<a href="{{ link('threads/edit', $thread) }}" data-xf-click="overlay" data-cache="false" data-href="{{ link('threads/edit', $thread, $editParams) }}">
												{{ phrase('edit') }}
											</a>
										</li>
									</xf:if>
								</xf:if>
								<xf:if is="$chooseName">
									<li><xf:checkbox standalone="true">
										<xf:option name="{$chooseName}[]" value="{$thread.thread_id}" class="js-chooseItem" />
										</xf:checkbox></li>
									<xf:elseif is="$allowInlineMod AND $thread.canUseInlineModeration()" />
									<li><xf:checkbox standalone="true">
										<xf:option value="{$thread.thread_id}" class="js-inlineModToggle"
												   data-xf-init="tooltip"
												   title="{{ phrase('select_for_moderation') }}"
												   label="{{ phrase('select_for_moderation') }}"
												   hiddenlabel="true"
												   />
										</xf:checkbox></li>
								</xf:if>
							</xf:contentcheck>
						</ul>
					</xf:if>

					<xf:if is="$thread.discussion_state == 'deleted'">
						<xf:if is="{$extraInfo}"><span class="structItem-extraInfo">{$extraInfo}</span></xf:if>

						<xf:macro template="deletion_macros" name="notice" arg-log="{$thread.DeletionLog}" />
						<xf:else />
						<ul class="structItem-parts">
							<li class="structItem-startDate">
								<xf:fa icon="fas fa-clock" title="{{ phrase('start_date')|for_attr }}" />
								<span class="u-srOnly">{{ phrase('start_date') }}</span>
								<a href="{{ link('threads', $thread) }}" rel="nofollow">{$thread.getTimeStampThread()}</a>
							</li>
							<li>
								<xf:fa icon="fas fa-thumbs-up" /> {$thread.first_post_reaction_score}
							</li>
							<li>
								<xf:fa icon="fas fa-eye" /> {$thread.getViewCountKM()}
							</li>
							<li>
								<xf:fa icon="fas fa-star" /> {$thread.brivium_rating_count}
							</li>
						</ul>

					</xf:if>
				</div>

				<div class="hiddenDivSlider" style="margin-bottom: 5px !important;">

					<hr class="formRowSep" style="margin: 10px 0px;"/>

					<xf:if is="$xf.options.fs_latest_thread_custom_field_game">
						<spam>{$thread.custom_fields.{$xf.options.fs_latest_thread_custom_field_game}}</spam>
						<br/>
					</xf:if>

					<ul class="structItem-parts">
						<xf:if is="$xf.options.enableTagging AND ($thread.canEditTags() OR $thread.tags)">
							<xf:css src="avForumsTagEss_thread_view_grouped_tags.less" />

							<xf:if is="$thread.GroupedTags">
								<xf:foreach loop="$thread.GroupedTags" key="$categoryId" value="$groupedTagsData">
									<li class="groupedTags">
										<xf:foreach loop="$groupedTagsData.tags" value="$groupedTag">
											<a href="{{ link('tags', $groupedTag) }}" data-xf-init="preview-tooltip" data-preview-url="{{ link('tags/preview', $groupedTag) }}" class="tagItem" dir="auto">{$groupedTag.tag}</a>
										</xf:foreach>
									</li>
								</xf:foreach>
							</xf:if>
						</xf:if>
					</ul>
				</div>

			</div>
		</xf:extension>

	</div>

	<script>
		// Function to initialize sliders
		function initializeSliders() {
			const sliders = document.querySelectorAll('.slider-container');

			sliders.forEach((sliderContainer) => {
				const slider = sliderContainer.querySelector('.slider');
				const images = slider.getElementsByTagName('img');
				const imageCount = images.length;
				let currentIndex = 0;

				const slideNumber = sliderContainer.querySelector('.slide-number');

				function changeSlide(index) {
					for (let img of images) {
						img.classList.remove('active');
					}
					images[index].classList.add('active');
					slideNumber.textContent = `${index + 1}/${imageCount}`;
				}

				sliderContainer.addEventListener('mouseenter', function() {
					currentIndex = 0;
					changeSlide(currentIndex);

					const intervalId = setInterval(() => {
						currentIndex++;
						if (currentIndex >= imageCount) {
							currentIndex = 0;
						}
						changeSlide(currentIndex);
					}, 3000);

					sliderContainer.addEventListener('mouseleave', function() {
						clearInterval(intervalId);
						changeSlide(0);
					}, { once: true });
				});
			});
		}

		// Initialize all sliders on the page
		window.onload = initializeSliders;
	</script>
</xf:macro>]]></template>
  <template type="public" title="fs_latest_update_list.less" version_id="1000100" version_string="1.0.1 Alpha"><![CDATA[.itemList-itemTypeIcon
{
	&.itemList-itemTypeIcon--image
	{
		&::after
		{
			.m-faContent(@fa-var-image);
		}

		display: none;
	}

	&.itemList-itemTypeIcon--embed
	{
		.m-faBase('Brands');
		&::after
		{
			.m-faContent(@fa-var-youtube);
		}
	}

	&.itemList-itemTypeIcon--video
	{
		&::after
		{
			.m-faContent(@fa-var-video);
		}
	}

	&.itemList-itemTypeIcon--audio
	{
		&::after
		{
			.m-faContent(@fa-var-music);
		}
	}

	&.itemList-itemTypeIcon--embed
	{
		&--applemusic
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-apple); }
		}

		&--facebook
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-facebook); }
		}

		&--flickr
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-flickr); }
		}

		&--instagram
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-instagram); }
		}

		&--pinterest
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-pinterest-square); }
		}

		&--reddit
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-reddit-alien); }
		}

		&--soundcloud
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-soundcloud); }
		}

		&--spotify
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-spotify); }
		}

		&--tumblr
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-tumblr-square); }
		}

		&--twitch
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-twitch); }
		}

		&--twitter
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-twitter); }
		}

		&--vimeo
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-vimeo); }
		}

		&--youtube
		{
			.m-faBase('Brands');
			&::after { .m-faContent(@fa-var-youtube); }
		}
	}
}

{{ include('xfmg_item_list.less') }}]]></template>
  <template type="public" title="fs_latest_update_list_slider.less" version_id="1000100" version_string="1.0.1 Alpha"><![CDATA[.lSSlideOuter {
    overflow-y: unset;
    overflow-x: clip;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none
}
.lightSlider:before, .lightSlider:after {
    content: " ";
    display: table;
}
.lightSlider {
    overflow: unset;
    margin: 0;
}
.lSSlideWrapper {
    max-width: 100%;
    overflow: unset;
    position: relative;
}
.lSSlideWrapper > .lightSlider:after {
    clear: both;
}
.lSSlideWrapper .lSSlide {
    -webkit-transform: translate(0px, 0px);
    -ms-transform: translate(0px, 0px);
    transform: translate(0px, 0px);
    -webkit-transition: all 1s;
    -webkit-transition-property: -webkit-transform,height;
    -moz-transition-property: -moz-transform,height;
    transition-property: transform,height;
    -webkit-transition-duration: inherit !important;
    transition-duration: inherit !important;
    -webkit-transition-timing-function: inherit !important;
    transition-timing-function: inherit !important;
}
.lSSlideWrapper .lSFade {
    position: relative;
}
.lSSlideWrapper .lSFade > * {
    position: absolute !important;
    top: 0;
    left: 0;
    z-index: 9;
    margin-right: 0;
    width: 100%;
}
.lSSlideWrapper.usingCss .lSFade > * {
    opacity: 0;
    -webkit-transition-delay: 0s;
    transition-delay: 0s;
    -webkit-transition-duration: inherit !important;
    transition-duration: inherit !important;
    -webkit-transition-property: opacity;
    transition-property: opacity;
    -webkit-transition-timing-function: inherit !important;
    transition-timing-function: inherit !important;
}
.lSSlideWrapper .lSFade > *.active {
    z-index: 10;
}
.lSSlideWrapper.usingCss .lSFade > *.active {
    opacity: 1;
}
/** /!!! End of core css Should not edit !!!/**/

/* Pager */
.lSSlideOuter .lSPager.lSpg {
    margin: 10px 0 0;
    padding: 0;
    text-align: center;
}
.lSSlideOuter .lSPager.lSpg > li {
    cursor: pointer;
    display: inline-block;
    padding: 0 5px;
}
.lSSlideOuter .lSPager.lSpg > li a {
    background-color: #222222;
    border-radius: 30px;
    display: inline-block;
    height: 8px;
    overflow: hidden;
    text-indent: -999em;
    width: 8px;
    position: relative;
    z-index: 99;
    -webkit-transition: all 0.5s linear 0s;
    transition: all 0.5s linear 0s;
}
.lSSlideOuter .lSPager.lSpg > li:hover a, .lSSlideOuter .lSPager.lSpg > li.active a {
    background-color: #428bca;
}
.lSSlideOuter .media {
    opacity: 0.8;
}
.lSSlideOuter .media.active {
    opacity: 1;
}
/* End of pager */

/** Gallery */
.lSSlideOuter .lSPager.lSGallery {
    list-style: none outside none;
    padding-left: 0;
    margin: 0;
    overflow: hidden;
    transform: translate3d(0px, 0px, 0px);
    -moz-transform: translate3d(0px, 0px, 0px);
    -ms-transform: translate3d(0px, 0px, 0px);
    -webkit-transform: translate3d(0px, 0px, 0px);
    -o-transform: translate3d(0px, 0px, 0px);
    -webkit-transition-property: -webkit-transform;
    -moz-transition-property: -moz-transform;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}
.lSSlideOuter .lSPager.lSGallery li {
    overflow: hidden;
    -webkit-transition: border-radius 0.12s linear 0s 0.35s linear 0s;
    transition: border-radius 0.12s linear 0s 0.35s linear 0s;
}
.lSSlideOuter .lSPager.lSGallery li.active, .lSSlideOuter .lSPager.lSGallery li:hover {
    border-radius: 5px;
}
.lSSlideOuter .lSPager.lSGallery img {
    display: block;
    height: auto;
    max-width: 100%;
}
.lSSlideOuter .lSPager.lSGallery:before, .lSSlideOuter .lSPager.lSGallery:after {
    content: " ";
    display: table;
}
.lSSlideOuter .lSPager.lSGallery:after {
    clear: both;
}
/* End of Gallery*/

/* slider actions */
.lSAction > a {
    width: 32px;
    display: block;
    top: 50%;
    height: 32px;
    background-image: url('../img/controls.png');
    cursor: pointer;
    position: absolute;
    z-index: 99;
    margin-top: -16px;
    opacity: 0.5;
    -webkit-transition: opacity 0.35s linear 0s;
    transition: opacity 0.35s linear 0s;
}
.lSAction > a:hover {
    opacity: 1;
}
.lSAction > .lSPrev {
    background-position: 0 0;
    left: 10px;
}
.lSAction > .lSNext {
    background-position: -32px 0;
    right: 10px;
}
.lSAction > a.disabled {
    pointer-events: none;
}
.cS-hidden {
    height: 1px;
    opacity: 0;
    filter: alpha(opacity=0);
    overflow: hidden;
}


/* vertical */
.lSSlideOuter.vertical {
    position: relative;
}
.lSSlideOuter.vertical.noPager {
    padding-right: 0px !important;
}
.lSSlideOuter.vertical .lSGallery {
    position: absolute !important;
    right: 0;
    top: 0;
}
.lSSlideOuter.vertical .lightSlider > * {
    width: 100% !important;
    max-width: none !important;
}

/* vertical controlls */
.lSSlideOuter.vertical .lSAction > a {
    left: 50%;
    margin-left: -14px;
    margin-top: 0;
}
.lSSlideOuter.vertical .lSAction > .lSNext {
    background-position: 31px -31px;
    bottom: 10px;
    top: auto;
}
.lSSlideOuter.vertical .lSAction > .lSPrev {
    background-position: 0 -31px;
    bottom: auto;
    top: 10px;
}
/* vertical */


/* Rtl */
.lSSlideOuter.lSrtl {
    direction: rtl;
}
.lSSlideOuter .lightSlider, .lSSlideOuter .lSPager {
    padding-left: 0;
    list-style: none outside none;
}
.lSSlideOuter.lSrtl .lightSlider, .lSSlideOuter.lSrtl .lSPager {
    padding-right: 0;
}
.lSSlideOuter .lightSlider > *,  .lSSlideOuter .lSGallery li {
    float: left;
}
.lSSlideOuter.lSrtl .lightSlider > *,  .lSSlideOuter.lSrtl .lSGallery li {
    float: right !important;
}
/* Rtl */

@-webkit-keyframes rightEnd {
    0% {
        left: 0;
    }

    50% {
        left: -15px;
    }

    100% {
        left: 0;
    }
}
@keyframes rightEnd {
    0% {
        left: 0;
    }

    50% {
        left: -15px;
    }

    100% {
        left: 0;
    }
}
@-webkit-keyframes topEnd {
    0% {
        top: 0;
    }

    50% {
        top: -15px;
    }

    100% {
        top: 0;
    }
}
@keyframes topEnd {
    0% {
        top: 0;
    }

    50% {
        top: -15px;
    }

    100% {
        top: 0;
    }
}
@-webkit-keyframes leftEnd {
    0% {
        left: 0;
    }

    50% {
        left: 15px;
    }

    100% {
        left: 0;
    }
}
@keyframes leftEnd {
    0% {
        left: 0;
    }

    50% {
        left: 15px;
    }

    100% {
        left: 0;
    }
}
@-webkit-keyframes bottomEnd {
    0% {
        bottom: 0;
    }

    50% {
        bottom: -15px;
    }

    100% {
        bottom: 0;
    }
}
@keyframes bottomEnd {
    0% {
        bottom: 0;
    }

    50% {
        bottom: -15px;
    }

    100% {
        bottom: 0;
    }
}
.lSSlideOuter .rightEnd {
    -webkit-animation: rightEnd 0.3s;
    animation: rightEnd 0.3s;
    position: relative;
}
.lSSlideOuter .leftEnd {
    -webkit-animation: leftEnd 0.3s;
    animation: leftEnd 0.3s;
    position: relative;
}
.lSSlideOuter.vertical .rightEnd {
    -webkit-animation: topEnd 0.3s;
    animation: topEnd 0.3s;
    position: relative;
}
.lSSlideOuter.vertical .leftEnd {
    -webkit-animation: bottomEnd 0.3s;
    animation: bottomEnd 0.3s;
    position: relative;
}
.lSSlideOuter.lSrtl .rightEnd {
    -webkit-animation: leftEnd 0.3s;
    animation: leftEnd 0.3s;
    position: relative;
}
.lSSlideOuter.lSrtl .leftEnd {
    -webkit-animation: rightEnd 0.3s;
    animation: rightEnd 0.3s;
    position: relative;
}
/*/  GRab cursor */
.lightSlider.lsGrab > * {
  cursor: -webkit-grab;
  cursor: -moz-grab;
  cursor: -o-grab;
  cursor: -ms-grab;
  cursor: grab;
}
.lightSlider.lsGrabbing > * {
  cursor: move;
  cursor: -webkit-grabbing;
  cursor: -moz-grabbing;
  cursor: -o-grabbing;
  cursor: -ms-grabbing;
  cursor: grabbing;
}






// XENFORO EXTENSIONS AND OVERRIDES

.lSSlideOuter .lSPager.lSpg
{
    line-height: 1;
}

.lSSlideOuter .lSPager.lSpg > li
{
    height: 20px;
    line-height: 20px;
}

.lSSlideOuter .lSPager.lSpg > li a
{
    position: relative;
    top: -2px;
    background-color: @xf-textColor;
    opacity: .3;
}

.lSSlideOuter .lSPager.lSpg > li:hover a,
.lSSlideOuter .lSPager.lSpg > li.active a
{
    background-color: @xf-linkColor;
    opacity: 1;
}

@actionIconColor: white;
@actionBorderColor: black;
@actionBorderWidth: 0.75px;

.lSAction > a
{
    background-image: none;
    text-decoration: none;
    line-height: 32px;
    font-size: 2em;

    color: @actionIconColor;
    opacity: 0.6;

    &.lSNext
    {
        text-align: right;
    }

    &.lSPrev
    {
        text-align: left;
    }

    &:after
    {
        .m-faBase();
        .m-faContent(@fa-var-chevron-right, .63em);
        .m-textOutline();
    }
}

.lSAction > a.lSNext:after
{
 	.m-faContent(@fa-var-chevron-right, .63em, ltr);
    .m-faContent(@fa-var-chevron-left, .63em, rtl);
}
.lSAction > a.lSPrev:after
{
    .m-faContent(@fa-var-chevron-left, .63em, ltr);
	.m-faContent(@fa-var-chevron-right, .63em, rtl);
}]]></template>
  <template type="public" title="fs_latest_update_user_options" version_id="1000100" version_string="1.0.1 Alpha"><![CDATA[<xf:title>{{ phrase('fs_latest_options') }} </xf:title>

<xf:form action="{{ link('latest-contents/options') }}" class="block" ajax="true">
	<div class="block-container">
		<div class="block-body js-prefixListenContainer">

			<xf:radiorow name="tile_layout" value="{$xf.visitor.tile_layout}"
						 label="{{ phrase('fs_latest_update_layout') }}">

				<xf:option value="grid"><i class="fas fa-th" ></i></xf:option>
				<xf:option value="girdLg"><i class="fas fa-th-large" ></i></xf:option>
				<xf:option value="list"><i class="fas fa-list" ></i></xf:option>
			</xf:radiorow>

			<xf:radiorow name="new_tab" value="{$xf.visitor.new_tab}"
						 label="{{ phrase('fs_latest_update_new_tab') }}">

				<xf:option value="yes">{{ phrase('yes') }}</xf:option>
				<xf:option value="no">{{ phrase('no') }}</xf:option>
			</xf:radiorow>

			<xf:radiorow name="filter_sidebar" value="{$xf.visitor.filter_sidebar}"
						 label="{{ phrase('fs_latest_update_filter_sidebar') }}">

				<xf:option value="normal">{{ phrase('fs_latest_update_normal') }}</xf:option>
				<xf:option value="sticky">{{ phrase('sticky') }}</xf:option>
			</xf:radiorow>

			<xf:radiorow name="version_style" value="{$xf.visitor.version_style}"
						 label="{{ phrase('fs_latest_update_version_style') }}">

				<xf:option value="small">{{ phrase('fs_latest_update_small') }}</xf:option>
				<xf:option value="large">{{ phrase('fs_latest_update_large') }}</xf:option>
			</xf:radiorow>

		</div>
		<xf:submitrow icon="save" sticky="true" />
	</div>
</xf:form>]]></template>
</templates>
